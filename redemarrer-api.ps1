# Script pour red√©marrer l'API Karima
Write-Host "üîÑ Red√©marrage de l'API Karima..." -ForegroundColor Green

# Arr√™ter les processus .NET existants
Write-Host "`n1. Arr√™t des processus .NET..." -ForegroundColor Yellow
$dotnetProcesses = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue
if ($dotnetProcesses) {
    $dotnetProcesses | ForEach-Object {
        Write-Host "Arr√™t du processus PID: $($_.Id)" -ForegroundColor Cyan
        Stop-Process -Id $_.Id -Force -ErrorAction SilentlyContinue
    }
} else {
    Write-Host "Aucun processus .NET trouv√©" -ForegroundColor Cyan
}

# Attendre un peu
Start-Sleep -Seconds 2

# Red√©marrer l'API
Write-Host "`n2. Red√©marrage de l'API..." -ForegroundColor Yellow
Set-Location "api"
Write-Host "D√©marrage de l'API sur le port 5000..." -ForegroundColor Cyan
Start-Process -FilePath "dotnet" -ArgumentList "run" -WindowStyle Normal

# Attendre un peu pour que l'API d√©marre
Start-Sleep -Seconds 3

# Tester l'API
Write-Host "`n3. Test de l'API..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:5000/api/Public/service-content" -Method GET
    Write-Host "‚úÖ API red√©marr√©e avec succ√®s !" -ForegroundColor Green
    Write-Host "Contenu re√ßu: $($response.Count) √©l√©ments" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur lors du test de l'API: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚úÖ Red√©marrage termin√© !" -ForegroundColor Green
Write-Host "L'API devrait maintenant √™tre accessible sur http://localhost:5000" -ForegroundColor Cyan
