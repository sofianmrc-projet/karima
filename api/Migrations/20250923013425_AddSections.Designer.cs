// <auto-generated />
using System;
using Karima.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Karima.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250923013425_AddSections")]
    partial class AddSections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Karima.Api.Models.ContactRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ContactRequests");
                });

            modelBuilder.Entity("Karima.Api.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Karima.Api.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Accueil",
                            Content = "Bienvenue chez Karima",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Titre principal de la page d'accueil",
                            IsActive = true,
                            Key = "home_hero",
                            SortOrder = 1,
                            Title = "Section Hero - Accueil",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Accueil",
                            Content = "Votre partenaire de confiance",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sous-titre de la page d'accueil",
                            IsActive = true,
                            Key = "home_hero_subtitle",
                            SortOrder = 2,
                            Title = "Sous-titre Hero",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Accueil",
                            Content = "Des solutions innovantes pour votre entreprise",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description principale de la page d'accueil",
                            IsActive = true,
                            Key = "home_hero_description",
                            SortOrder = 3,
                            Title = "Description Hero",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Accueil",
                            Content = "Une entreprise dédiée à votre succès",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Section à propos sur l'accueil",
                            IsActive = true,
                            Key = "home_about",
                            SortOrder = 4,
                            Title = "Section À propos",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Accueil",
                            Content = "100+ Projets réalisés|50+ Clients satisfaits|5+ Années d'expérience",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Statistiques de l'entreprise",
                            IsActive = true,
                            Key = "home_stats",
                            SortOrder = 5,
                            Title = "Statistiques",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Services",
                            Content = "Nos Services",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Titre principal de la page services",
                            IsActive = true,
                            Key = "services_hero",
                            SortOrder = 1,
                            Title = "Hero Services",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Category = "Services",
                            Content = "Des solutions complètes et personnalisées pour répondre à tous vos besoins professionnels",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description de la page services",
                            IsActive = true,
                            Key = "services_description",
                            SortOrder = 2,
                            Title = "Description Services",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Category = "Services",
                            Content = "Accompagnement personnalisé pour optimiser vos processus et améliorer vos performances organisationnelles.",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Premier service",
                            IsActive = true,
                            Key = "service_consulting",
                            SortOrder = 3,
                            Title = "Consulting Stratégique",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Category = "Services",
                            Content = "Formations sur mesure pour développer les compétences de vos équipes et améliorer leur performance.",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Deuxième service",
                            IsActive = true,
                            Key = "service_formation",
                            SortOrder = 4,
                            Title = "Formation Professionnelle",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Category = "Services",
                            Content = "Support permanent pour assurer la réussite de vos projets et transformations organisationnelles.",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Troisième service",
                            IsActive = true,
                            Key = "service_accompagnement",
                            SortOrder = 5,
                            Title = "Accompagnement Continu",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Category = "À propos",
                            Content = "À propos de nous",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Titre principal de la page à propos",
                            IsActive = true,
                            Key = "about_hero",
                            SortOrder = 1,
                            Title = "Hero À propos",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Category = "À propos",
                            Content = "Une entreprise dédiée à l'excellence et à l'innovation",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Section entreprise",
                            IsActive = true,
                            Key = "about_company",
                            SortOrder = 2,
                            Title = "Notre entreprise",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Category = "À propos",
                            Content = "Des professionnels passionnés et expérimentés",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Section équipe",
                            IsActive = true,
                            Key = "about_team",
                            SortOrder = 3,
                            Title = "Notre équipe",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            Category = "À propos",
                            Content = "Des valeurs qui nous guident au quotidien",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Section valeurs",
                            IsActive = true,
                            Key = "about_values",
                            SortOrder = 4,
                            Title = "Nos valeurs",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            Category = "Contact",
                            Content = "Contactez-nous",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Titre principal de la page contact",
                            IsActive = true,
                            Key = "contact_hero",
                            SortOrder = 1,
                            Title = "Hero Contact",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            Category = "Contact",
                            Content = "123 Rue de la Paix, 75001 Paris|+33 1 23 45 67 89|contact@karima.com|Lun-Ven: 9h-18h",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coordonnées de contact",
                            IsActive = true,
                            Key = "contact_info",
                            SortOrder = 2,
                            Title = "Informations de contact",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            Category = "Footer",
                            Content = "Karima",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nom de l'entreprise dans le footer",
                            IsActive = true,
                            Key = "footer_company",
                            SortOrder = 1,
                            Title = "Footer - Entreprise",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            Category = "Footer",
                            Content = "Votre partenaire de confiance pour tous vos projets",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description dans le footer",
                            IsActive = true,
                            Key = "footer_description",
                            SortOrder = 2,
                            Title = "Footer - Description",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            Category = "Footer",
                            Content = "© 2025 Karima. Tous droits réservés.",
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Copyright dans le footer",
                            IsActive = true,
                            Key = "footer_copyright",
                            SortOrder = 3,
                            Title = "Footer - Copyright",
                            UpdatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Karima.Api.Models.ServiceContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ServiceContents");
                });

            modelBuilder.Entity("Karima.Api.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("Karima.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Karima.Api.Models.MediaFile", b =>
                {
                    b.HasOne("Karima.Api.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Karima.Api.Models.Section", b =>
                {
                    b.HasOne("Karima.Api.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Karima.Api.Models.ServiceContent", b =>
                {
                    b.HasOne("Karima.Api.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
